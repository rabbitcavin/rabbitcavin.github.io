<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rabbit</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-21T13:40:24.100Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rabbit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2018/03/21/Ajax/"/>
    <id>http://yoursite.com/2018/03/21/Ajax/</id>
    <published>2018-03-21T12:57:35.000Z</published>
    <updated>2018-03-21T13:40:24.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>   Ajax:异步加载页面<br>   Ajax的主要优势就是对页面的请求以异步方式发送到服务器，利用Ajax，Web应用可以呈现出功能丰富、交互敏捷、类似桌面应用般的体验，就像你使用谷歌地图时一样的感觉。<br>   <strong>Ajax的核心就是XMLHttpRequest对象。这个对象充当着浏览器中的脚本与服务器之间的中间人的角色。</strong><br>   重要的脚本<strong>addLoadEvent.js &amp;&amp; getHTTPObject.js &amp;&amp; getNewContent.js</strong><br>   为了模拟服务器的响应，在ajax.html旁边创建一个example.txt的文件<br>   内容：<strong>This was loaded asynchronously! </strong></p><h3 id="getHTTPObject-js"><a href="#getHTTPObject-js" class="headerlink" title="getHTTPObject.js"></a>getHTTPObject.js</h3><pre><code>function getHTTPObject() {    if (typeof XMLHttpRequest == &quot;underfined&quot;)    XMLHTTPRequest = function() {        try { return new ActiveXObject(&quot;Msxml2.XMLHTTP.6.0&quot;);}        catch(e) {}        try { return new ActiveXObject(&quot;Msxml2.XMLHTTP.3.0&quot;);}        catch(e) {}        try { return new ActiveXObject(&quot;Msxml2.XMLHTTP.3.0&quot;);}        catch(e) {}        return false;    }    return new XMLHttpRequest();}</code></pre><p>   getHTTPObject 通过对象检测技术检测了 XMLHttpRequest。如果失败，则继续检测其他方法，最终返回false或一个心得XMLHttpRequest对象。</p><h3 id="getNewContent-js"><a href="#getNewContent-js" class="headerlink" title="getNewContent.js"></a>getNewContent.js</h3><pre><code>function getNewContent(){    var request = getHTTPObject();    if (request) {        request.open( &quot;GET&quot;, &quot;example.txt&quot;,true );        request.onreadystatechange = function() {            if (request.readyState == 4) {                var para = document.createElement(&quot;p&quot;);                var txt = document.createTextNode(&quot;request.responseText&quot;);                para.appendChild(txt);                document.getElementById(&apos;new&apos;).appendChild(para);            }        };        request.send(null);    } else {        alert(&apos;Sorry,your browser doesn&apos;t support XMLHttpRequest&apos;);    }}addLoadEvent(getNewContent);</code></pre><p>  当页面加载完成后，以上代码会发送一个Get请求，请求与ajax.html文件位于同一example.txt文件</p><p>   服务器在向XMLHttpRequest对象发回响应的时，该对象有许多属性可用，浏览器会在不同阶段更新readystate属性的值，它有5个可能的值：<br>     <strong>0表示未初始化<br>     1表示正在加载<br>     2表示加载完毕<br>     3表示正在交互<br>     4表示完成</strong><br>   只要readyState属性的值变成了4，就可以访问服务器发送回来的数据了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;p&gt;   Ajax:异步加载页面&lt;br&gt;   Ajax的主要优势就是对页面的请求以异步方式发送到服务器，利用Ajax，Web应用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>innerHTML</title>
    <link href="http://yoursite.com/2018/03/21/innerHTML/"/>
    <id>http://yoursite.com/2018/03/21/innerHTML/</id>
    <published>2018-03-21T12:48:11.000Z</published>
    <updated>2018-03-21T12:55:10.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="innerHTML属性"><a href="#innerHTML属性" class="headerlink" title="innerHTML属性"></a>innerHTML属性</h2><p>  innerHTML属性可以用来读、写某给定元素里的HTML内容。<br>  <strong>eg：window.onload = function(){<br>    var testdiv = document.getElementById(“testdiv”);<br>    alert(testdiv.innerHTML);}</strong><br>   innerHTMl毫无细节可言，但它不仅可以读出元素中的HTML内容，还可以把HTML内容写入元素。<br>   <strong>innerHTML也是HTML专有属性，不能用于任何其他标记语言文档。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;innerHTML属性&quot;&gt;&lt;a href=&quot;#innerHTML属性&quot; class=&quot;headerlink&quot; title=&quot;innerHTML属性&quot;&gt;&lt;/a&gt;innerHTML属性&lt;/h2&gt;&lt;p&gt;  innerHTML属性可以用来读、写某给定元素里的HTML内容。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOM</title>
    <link href="http://yoursite.com/2018/03/16/DOM/"/>
    <id>http://yoursite.com/2018/03/16/DOM/</id>
    <published>2018-03-16T08:24:52.000Z</published>
    <updated>2018-03-17T04:33:07.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有3种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。"><a href="#有3种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。" class="headerlink" title="有3种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。"></a>有3种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。</h1><p>1、getElementById<br>2、getElementsByTagName<br>3、getElementsByClassName</p><h2 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h2><p><strong>eg：document.getElementById(“id”)</strong></p><p>  DOM提供一个名为getElementById的方法，这个方法将返回一个与那个有着给定ID属性值的元素节点对应的对象。<br>  它只有一个参数，想获得那个元素的id属性的值，这个id值必须放在单引号或者双引号里面。</p><h2 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h2><p><strong>eg：document.getElementsByTagName</strong></p><p>  DOM提供一个名为getElementsByTagName的方法，这个方法返回一个对象数组，每个对象分别对应着文档里有着给定标签一个元素。<br>  这个调用将返回一个对象数组，每个对象分别对应着document对象中的一个列表项元素，可以查出数组的元素个数。</p><p>  <strong>eg:alert(document.getElementsByTagName(“li”).length)</strong></p><p>  用for循环和typeof操作符遍历这个数组。</p><p>  <strong>eg:for(var i=o;i&lt;document.getElementsByTagName(“li”).length;i++){<br>  alert(typeof document.getElementsByTagName(“li”)[i]; } </strong></p><h2 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h2><p><strong>eg: document.getElementsByClassName(“class”)</strong></p><p>  DOM提供一个名为getElementsByClasaName的方法，这个方法让我们能够通过class属性中的类名来访问元素。<br>  这个方法的返回值也与getElementByTagName类似，都是一个具有相同类名的元素的数组。<br>  使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名在参数中用空格分隔。</p><p>  <strong> eg:var shopping=document.getElementById(“purchass”);<br>   var sales=shopping.getElementsByClass(“sale”);</strong></p><h1 id="获取和设置属性"><a href="#获取和设置属性" class="headerlink" title="获取和设置属性"></a>获取和设置属性</h1><h2 id="获取属性-getAttribute"><a href="#获取属性-getAttribute" class="headerlink" title="获取属性(getAttribute)"></a>获取属性(getAttribute)</h2><p>   getAttribute方法不同于document对象，所以不能通过document对象调用。它只能通过元素节点对象调用。</p><p>   <strong>eg:var paras = document.getElementsByTagName(“p”)<br>   for(var i=0;i&lt;paras.length;i++){<br>   alert(paras[i].getAttribute(“title”)); }</strong></p><p>   我们可以修改脚本，让它只在title属性有值时才弹出消息。我们将增加一条if语句来检查getAttribute的返回值是不是null。<br>   <strong>eg:var paras = document.getElementsByTagName(“p”);<br>   for(var i=0;i&lt;paras.length;i++){<br>   var title_text = paras[i].getAttribute(“title”);<br>   if(title_test !=null) {<br>   alert(tittle_text) }<br>   }</strong></p><h2 id="修改属性-setAttribute"><a href="#修改属性-setAttribute" class="headerlink" title="修改属性(setAttribute)"></a>修改属性(setAttribute)</h2><p>   它允许哦我们对属性节点的值做出修改。与getAttribute一样，setAttribute也只能用于元素节点：<br>   <strong>object.setAttribute(attribute,value)</strong></p><p>   <strong>eg:var paras = document.getElementsByTagName(“p”);<br>   for(var i=0;i&lt;paras.length;i++){<br>   var title_text = paras[i].getAttribute(“title”);<br>   if(title_test) {<br>   paras[i].setAttribute(“title”,”brand new title text”);<br>   alert(paras[i].getAttribute(“title”)); }<br>   }</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有3种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。&quot;&gt;&lt;a href=&quot;#有3种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取。&quot; class=&quot;headerlink&quot; title=&quot;有3种DOM方法
      
    
    </summary>
    
    
  </entry>
  
</feed>
